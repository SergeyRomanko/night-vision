// Navy ~ 0.2-lite
// <ds>Create New Order by clicking on plus button</ds>

[OVERLAY name=QuickOrder, ctx=Canvas, verion=1.0.0]

var isClickable = false;
var isMouseDown = false;

init() {

}

function createRect(x, y, width, height) {
	return {
		"x": x,          // x-coordinate of the top-left corner
		"y": y,          // y-coordinate of the top-left corner
		"width": width,  // width of the rectangle
		"height": height // height of the rectangle
	};
}

function containsPoint(rect, px, py) {
	return px >= rect.x && px <= rect.x + rect.width &&
		   py >= rect.y && py <= rect.y + rect.height;
}

// Helper function to convert a named color to RGBA
function convertToRGBA(color, alpha) {
    if (color.startsWith("rgba")) return color; // Already RGBA
    if (color.startsWith("#")) {
        // Convert HEX to RGB
        let r = parseInt(color.substring(1, 3), 16);
        let g = parseInt(color.substring(3, 5), 16);
        let b = parseInt(color.substring(5, 7), 16);
        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    }
    return color; // Default return if color is not recognized
}

function drawPlus(ctx, x, y, size = 15, thickness = 5, color = "black", alpha = 1.0) {
    const center = size / 2; // Center of the plus sign
	
    ctx.strokeStyle = convertToRGBA(color, alpha); // Set stroke color
    ctx.lineWidth = thickness; // Set thickness of the lines
    ctx.lineCap = "round"; // Make the ends rounded

    // Draw horizontal line
    ctx.beginPath();
    ctx.moveTo(x, y + center);
    ctx.lineTo(x + size, y + center);
    ctx.stroke();

    // Draw vertical line
    ctx.beginPath();
    ctx.moveTo(x + center, y);
    ctx.lineTo(x + center, y + size);
    ctx.stroke();
}


function roundRect(ctx, x, y, w, h, r, s) {
    if (w < 2 * r) r = w / 2
    if (h < 2 * r) r = h / 2
    ctx.beginPath()
    ctx.moveTo(x+r, y)
    ctx.arcTo(x+w, y,   x+w, y+h, r*s)
    ctx.arcTo(x+w, y+h, x,   y+h, r*s)
    ctx.arcTo(x,   y+h, x,   y,   r*(1-s))
    ctx.arcTo(x,   y,   x+w, y,   r*(1-s))
    ctx.closePath()
    ctx.fill()
}

function roundRectButton(ctx, x, y, w, h, r, s) {
    if (w < 2 * r) r = w / 2
    if (h < 2 * r) r = h / 2
    ctx.beginPath()
    ctx.moveTo(x+r, y)
    ctx.arcTo(x+w, y,   x+w, y+h, 0)
    ctx.arcTo(x+w, y+h, x,   y+h, 0)
    ctx.arcTo(x,   y+h, x,   y,   r)
    ctx.arcTo(x,   y,   x+w, y,   r)
    ctx.closePath()
    ctx.fill()
}

draw(ctx) {

	const cursor = $core.cursor;
	const layout = $core.layout

	//TODO Тут костыль. Идея такая что если курсор не на свечном графике, то ничего не рисуем
	if(cursor.gridId != 0) return;
	
	if(!cursor.visible) return;

	ctx.save()
	
	ctx.fillStyle = $core.props.colors.panel
	
	const panHeight = $core.props.config.PANHEIGHT
    var S = 0
    let panWidth = 45
    let x = layout.width - panWidth
    let y = cursor.y - panHeight * 0.5 - 0.5
    let a = S ? 7 : panWidth - 3
    let h = panHeight
	
	if (isClickable)
		roundRect(ctx, x , y, panWidth, h, 0, 1)
	else
		roundRectButton(ctx, x , y, panWidth, h, 3, 1)
	
	var scale = layout.scales[layout.scaleIndex];
	let cursorValue = $core.props.cursor.scales[scale.scaleSpecs.id] || 0
	
	//TODO тут много потенциальных проблем
	let vt = $core.meta.valueTrackers[0][0] || [];
	let data = $core.hub.ovData(0, 0) || [];
    let last = data[data.length - 1] || [];
    let tracker2 = vt(last);
		
	let percentageText = calculateDifferencePercentage(tracker2.value, cursorValue);
	
	ctx.font = $core.props.config.FONT
    ctx.fillStyle = $core.props.colors.textHL
    ctx.textAlign = S ? 'left' : 'right'
    ctx.fillText(percentageText, layout.width - 3, y + panHeight - 7 - 0.5)
	
	if(isClickable)
	{
		let rect = createRect(x-21, y, 20, h);
				
		var isMouseOverButton = containsPoint(rect, $core.mouse.x, $core.mouse.y)

		var alphaScale = isMouseDown && isMouseOverButton ? 0.75 : 1.0;

		var buttonColor = isMouseOverButton
			? (tracker2.value < cursorValue ? $core.props.colors.volDw : $core.props.colors.volUp)
			: $core.props.colors.scale;
			
		ctx.fillStyle = convertToRGBA(buttonColor, alphaScale);
			
		roundRectButton(ctx, rect.x, rect.y, rect.width, rect.height, 3, 1)
		
		drawPlus(ctx, x - 14.75, y + 7, 8, 2.5, $core.props.colors.textHL, 0.85 * alphaScale);
	}
	
    ctx.restore()
}

mousedown(event) {
	isMouseDown = true;
	
	if (!isClickable) return;
	
	const panHeight = $core.props.config.PANHEIGHT
	const cursor = $core.cursor;
	const layout = $core.layout
	
	let panWidth = 45
	let x = layout.width - panWidth
    let y = cursor.y - panHeight * 0.5 - 0.5
	let h = panHeight
	let rect = createRect(x-21, y, 20, h);
	
	let overBuyButton = containsPoint(rect, $core.mouse.x, $core.mouse.y);
	
	$events.emit('quick-order')
}

mouseup(event) {
	isMouseDown = false;
}

mousemove(event) {
	//
}

keydown(event) {
    if (event.key === "Control")
	{
        isClickable = true;
		$events.emit('update-layout')
    }
}

keyup(event) {
	if (event.key === "Control")
	{
        isClickable = false;
		$events.emit('update-layout')
    }
}

//legend() => null

function calculateDifferencePercentage(value1, value2) {
    if (value1 === 0) return "+0.00%"; // Avoid division by zero, treat as 0% with positive sign
    let difference = ((value2 - value1) / value1) * 100;
    return (difference >= 0 ? "+" : "") + difference.toFixed(2) + "%"; // Add "+" for positive values
}
